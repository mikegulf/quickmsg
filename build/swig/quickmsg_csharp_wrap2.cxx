/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_quickmsg_csharp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_quickmsg_csharp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_quickmsg_csharp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include "quickmsg/quickmsg.hpp"
#include "quickmsg/types.hpp"
#include "quickmsg/publisher.hpp"
#include "quickmsg/subscriber.hpp"
#include "quickmsg/service.hpp"
#include "quickmsg/client.hpp"

using namespace quickmsg;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "quickmsg_csharp_wrap2.h"

SwigDirector_AsyncSubscriber::SwigDirector_AsyncSubscriber(std::string const &topic, quickmsg::MessageCallback impl, void *args) : quickmsg::AsyncSubscriber(topic, impl, args), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_AsyncSubscriber::SwigDirector_AsyncSubscriber(std::string const &topic) : quickmsg::AsyncSubscriber(topic), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_AsyncSubscriber::~SwigDirector_AsyncSubscriber() {
  
}


void SwigDirector_AsyncSubscriber::handle_message(quickmsg::Message const *msg) {
  void * jmsg = 0 ;
  
  if (!swig_callbackhandle_message) {
    quickmsg::AsyncSubscriber::handle_message(msg);
    return;
  } else {
    jmsg = (void *) msg; 
    swig_callbackhandle_message(jmsg);
  }
}

void SwigDirector_AsyncSubscriber::swig_connect_director(SWIG_Callback0_t callbackhandle_message) {
  swig_callbackhandle_message = callbackhandle_message;
}

void SwigDirector_AsyncSubscriber::swig_init_callbacks() {
  swig_callbackhandle_message = 0;
}

SwigDirector_Service::SwigDirector_Service(std::string const &srv_name, size_t queue_size) : quickmsg::Service(srv_name, queue_size), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Service::SwigDirector_Service(std::string const &srv_name, quickmsg::ServiceCallback cb, void *args, size_t queue_size) : quickmsg::Service(srv_name, cb, args, queue_size), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Service::~SwigDirector_Service() {
  
}


std::string SwigDirector_Service::service_impl(quickmsg::Message const *req) {
  std::string c_result ;
  char * jresult = 0 ;
  void * jreq = 0 ;
  
  if (!swig_callbackservice_impl) {
    return quickmsg::Service::service_impl(req);
  } else {
    jreq = (void *) req; 
    jresult = (char *) swig_callbackservice_impl(jreq);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
      return c_result;
    }
    c_result.assign(jresult); 
  }
  return c_result;
}

void SwigDirector_Service::swig_connect_director(SWIG_Callback0_t callbackservice_impl) {
  swig_callbackservice_impl = callbackservice_impl;
}

void SwigDirector_Service::swig_init_callbacks() {
  swig_callbackservice_impl = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_init(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  quickmsg::init((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_shutdown__SWIG_0(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  quickmsg::shutdown((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_shutdown__SWIG_1() {
  quickmsg::shutdown();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ok() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)quickmsg::ok();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_header_set(void * jarg1, void * jarg2) {
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  Header arg2 ;
  Header *argp2 ;
  
  arg1 = (quickmsg::Message *)jarg1; 
  argp2 = (Header *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Header", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->header = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_header_get(void * jarg1) {
  void * jresult ;
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  Header result;
  
  arg1 = (quickmsg::Message *)jarg1; 
  result =  ((arg1)->header);
  jresult = new Header((const Header &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_msg_set(void * jarg1, char * jarg2) {
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (quickmsg::Message *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Message_msg_get(void * jarg1) {
  char * jresult ;
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (quickmsg::Message *)jarg1; 
  result = (std::string *) & ((arg1)->msg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Message__SWIG_0() {
  void * jresult ;
  quickmsg::Message *result = 0 ;
  
  result = (quickmsg::Message *)new quickmsg::Message();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Message__SWIG_1(void * jarg1) {
  void * jresult ;
  quickmsg::Message *arg1 = 0 ;
  quickmsg::Message *result = 0 ;
  
  arg1 = (quickmsg::Message *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "quickmsg::Message const & type is null", 0);
    return 0;
  } 
  result = (quickmsg::Message *)new quickmsg::Message((quickmsg::Message const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Message(void * jarg1) {
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  
  arg1 = (quickmsg::Message *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Message_get_stamp(void * jarg1) {
  double jresult ;
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  double result;
  
  arg1 = (quickmsg::Message *)jarg1; 
  result = (double)((quickmsg::Message const *)arg1)->get_stamp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Message_get_context(void * jarg1) {
  char * jresult ;
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  std::string result;
  
  arg1 = (quickmsg::Message *)jarg1; 
  result = ((quickmsg::Message const *)arg1)->get_context();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Message_get_src(void * jarg1) {
  char * jresult ;
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  std::string result;
  
  arg1 = (quickmsg::Message *)jarg1; 
  result = ((quickmsg::Message const *)arg1)->get_src();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Message_get_msg(void * jarg1) {
  char * jresult ;
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  std::string result;
  
  arg1 = (quickmsg::Message *)jarg1; 
  result = ((quickmsg::Message const *)arg1)->get_msg();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_set_stamp_now(void * jarg1) {
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  
  arg1 = (quickmsg::Message *)jarg1; 
  (arg1)->set_stamp_now();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_set_context(void * jarg1, char * jarg2) {
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (quickmsg::Message *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_context((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_set_msg(void * jarg1, char * jarg2) {
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (quickmsg::Message *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->set_msg((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceReply__SWIG_0() {
  void * jresult ;
  quickmsg::ServiceReply *result = 0 ;
  
  result = (quickmsg::ServiceReply *)new quickmsg::ServiceReply();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceReply__SWIG_1(void * jarg1) {
  void * jresult ;
  quickmsg::ServiceReply *arg1 = 0 ;
  quickmsg::ServiceReply *result = 0 ;
  
  arg1 = (quickmsg::ServiceReply *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "quickmsg::ServiceReply const & type is null", 0);
    return 0;
  } 
  result = (quickmsg::ServiceReply *)new quickmsg::ServiceReply((quickmsg::ServiceReply const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceReply__SWIG_2(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  quickmsg::Message *arg1 = 0 ;
  bool arg2 ;
  quickmsg::ServiceReply *result = 0 ;
  
  arg1 = (quickmsg::Message *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "quickmsg::Message const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (quickmsg::ServiceReply *)new quickmsg::ServiceReply((quickmsg::Message const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceReply__SWIG_3(void * jarg1) {
  void * jresult ;
  quickmsg::Message *arg1 = 0 ;
  quickmsg::ServiceReply *result = 0 ;
  
  arg1 = (quickmsg::Message *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "quickmsg::Message const & type is null", 0);
    return 0;
  } 
  result = (quickmsg::ServiceReply *)new quickmsg::ServiceReply((quickmsg::Message const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ServiceReply(void * jarg1) {
  quickmsg::ServiceReply *arg1 = (quickmsg::ServiceReply *) 0 ;
  
  arg1 = (quickmsg::ServiceReply *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceReply_successful_set(void * jarg1, unsigned int jarg2) {
  quickmsg::ServiceReply *arg1 = (quickmsg::ServiceReply *) 0 ;
  bool arg2 ;
  
  arg1 = (quickmsg::ServiceReply *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->successful = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ServiceReply_successful_get(void * jarg1) {
  unsigned int jresult ;
  quickmsg::ServiceReply *arg1 = (quickmsg::ServiceReply *) 0 ;
  bool result;
  
  arg1 = (quickmsg::ServiceReply *)jarg1; 
  result = (bool) ((arg1)->successful);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Publisher__SWIG_0(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  quickmsg::Publisher *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  result = (quickmsg::Publisher *)new quickmsg::Publisher((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Publisher__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::Publisher *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (quickmsg::Publisher *)new quickmsg::Publisher((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Publisher(void * jarg1) {
  quickmsg::Publisher *arg1 = (quickmsg::Publisher *) 0 ;
  
  arg1 = (quickmsg::Publisher *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Publisher_publish(void * jarg1, char * jarg2) {
  quickmsg::Publisher *arg1 = (quickmsg::Publisher *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (quickmsg::Publisher *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->publish((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Publisher_join(void * jarg1) {
  quickmsg::Publisher *arg1 = (quickmsg::Publisher *) 0 ;
  
  arg1 = (quickmsg::Publisher *)jarg1; 
  (arg1)->join();
}


SWIGEXPORT void SWIGSTDCALL CSharp_default_cb(void * jarg1, void * jarg2) {
  quickmsg::Message *arg1 = (quickmsg::Message *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (quickmsg::Message *)jarg1; 
  arg2 = (void *)jarg2; 
  quickmsg::default_cb((quickmsg::Message const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Subscriber__SWIG_0(char * jarg1, unsigned long jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  quickmsg::Subscriber *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (size_t)jarg2; 
  result = (quickmsg::Subscriber *)new quickmsg::Subscriber((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Subscriber__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::Subscriber *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (quickmsg::Subscriber *)new quickmsg::Subscriber((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Subscriber(void * jarg1) {
  quickmsg::Subscriber *arg1 = (quickmsg::Subscriber *) 0 ;
  
  arg1 = (quickmsg::Subscriber *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Subscriber_messages(void * jarg1) {
  void * jresult ;
  quickmsg::Subscriber *arg1 = (quickmsg::Subscriber *) 0 ;
  SwigValueWrapper< std::vector< quickmsg::Message * > > result;
  
  arg1 = (quickmsg::Subscriber *)jarg1; 
  result = (arg1)->messages();
  jresult = new quickmsg::MsgList((const quickmsg::MsgList &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Subscriber_join(void * jarg1) {
  quickmsg::Subscriber *arg1 = (quickmsg::Subscriber *) 0 ;
  
  arg1 = (quickmsg::Subscriber *)jarg1; 
  (arg1)->join();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AsyncSubscriber__SWIG_0(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::MessageCallback arg2 = (quickmsg::MessageCallback) 0 ;
  void *arg3 = (void *) 0 ;
  quickmsg::AsyncSubscriber *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (quickmsg::MessageCallback)jarg2; 
  arg3 = (void *)jarg3; 
  result = (quickmsg::AsyncSubscriber *)new SwigDirector_AsyncSubscriber((std::string const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AsyncSubscriber__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::MessageCallback arg2 = (quickmsg::MessageCallback) 0 ;
  quickmsg::AsyncSubscriber *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (quickmsg::MessageCallback)jarg2; 
  result = (quickmsg::AsyncSubscriber *)new SwigDirector_AsyncSubscriber((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AsyncSubscriber__SWIG_2(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::AsyncSubscriber *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (quickmsg::AsyncSubscriber *)new SwigDirector_AsyncSubscriber((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AsyncSubscriber(void * jarg1) {
  quickmsg::AsyncSubscriber *arg1 = (quickmsg::AsyncSubscriber *) 0 ;
  
  arg1 = (quickmsg::AsyncSubscriber *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AsyncSubscriber_spin(void * jarg1) {
  quickmsg::AsyncSubscriber *arg1 = (quickmsg::AsyncSubscriber *) 0 ;
  
  arg1 = (quickmsg::AsyncSubscriber *)jarg1; 
  (arg1)->spin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AsyncSubscriber_async_spin(void * jarg1) {
  quickmsg::AsyncSubscriber *arg1 = (quickmsg::AsyncSubscriber *) 0 ;
  
  arg1 = (quickmsg::AsyncSubscriber *)jarg1; 
  (arg1)->async_spin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AsyncSubscriber_handle_message(void * jarg1, void * jarg2) {
  quickmsg::AsyncSubscriber *arg1 = (quickmsg::AsyncSubscriber *) 0 ;
  quickmsg::Message *arg2 = (quickmsg::Message *) 0 ;
  
  arg1 = (quickmsg::AsyncSubscriber *)jarg1; 
  arg2 = (quickmsg::Message *)jarg2; 
  (arg1)->handle_message((quickmsg::Message const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AsyncSubscriber_handle_messageSwigExplicitAsyncSubscriber(void * jarg1, void * jarg2) {
  quickmsg::AsyncSubscriber *arg1 = (quickmsg::AsyncSubscriber *) 0 ;
  quickmsg::Message *arg2 = (quickmsg::Message *) 0 ;
  
  arg1 = (quickmsg::AsyncSubscriber *)jarg1; 
  arg2 = (quickmsg::Message *)jarg2; 
  (arg1)->quickmsg::AsyncSubscriber::handle_message((quickmsg::Message const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AsyncSubscriber_director_connect(void *objarg, SwigDirector_AsyncSubscriber::SWIG_Callback0_t callback0) {
  quickmsg::AsyncSubscriber *obj = (quickmsg::AsyncSubscriber *)objarg;
  SwigDirector_AsyncSubscriber *director = dynamic_cast<SwigDirector_AsyncSubscriber *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Service__SWIG_0(char * jarg1, unsigned long jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  quickmsg::Service *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (size_t)jarg2; 
  result = (quickmsg::Service *)new SwigDirector_Service((std::string const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Service__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::Service *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (quickmsg::Service *)new SwigDirector_Service((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Service__SWIG_2(char * jarg1, void * jarg2, void * jarg3, unsigned long jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::ServiceCallback arg2 = (quickmsg::ServiceCallback) 0 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  quickmsg::Service *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (quickmsg::ServiceCallback)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (quickmsg::Service *)new SwigDirector_Service((std::string const &)*arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Service__SWIG_3(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::ServiceCallback arg2 = (quickmsg::ServiceCallback) 0 ;
  void *arg3 = (void *) 0 ;
  quickmsg::Service *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (quickmsg::ServiceCallback)jarg2; 
  arg3 = (void *)jarg3; 
  result = (quickmsg::Service *)new SwigDirector_Service((std::string const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Service(void * jarg1) {
  quickmsg::Service *arg1 = (quickmsg::Service *) 0 ;
  
  arg1 = (quickmsg::Service *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Service_service_impl(void * jarg1, void * jarg2) {
  char * jresult ;
  quickmsg::Service *arg1 = (quickmsg::Service *) 0 ;
  quickmsg::Message *arg2 = (quickmsg::Message *) 0 ;
  std::string result;
  
  arg1 = (quickmsg::Service *)jarg1; 
  arg2 = (quickmsg::Message *)jarg2; 
  result = (arg1)->service_impl((quickmsg::Message const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Service_service_implSwigExplicitService(void * jarg1, void * jarg2) {
  char * jresult ;
  quickmsg::Service *arg1 = (quickmsg::Service *) 0 ;
  quickmsg::Message *arg2 = (quickmsg::Message *) 0 ;
  std::string result;
  
  arg1 = (quickmsg::Service *)jarg1; 
  arg2 = (quickmsg::Message *)jarg2; 
  result = (arg1)->quickmsg::Service::service_impl((quickmsg::Message const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Service_spin(void * jarg1) {
  quickmsg::Service *arg1 = (quickmsg::Service *) 0 ;
  
  arg1 = (quickmsg::Service *)jarg1; 
  (arg1)->spin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Service_async_spin(void * jarg1) {
  quickmsg::Service *arg1 = (quickmsg::Service *) 0 ;
  
  arg1 = (quickmsg::Service *)jarg1; 
  (arg1)->async_spin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Service_director_connect(void *objarg, SwigDirector_Service::SWIG_Callback0_t callback0) {
  quickmsg::Service *obj = (quickmsg::Service *)objarg;
  SwigDirector_Service *director = dynamic_cast<SwigDirector_Service *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceCallTimeout__SWIG_0() {
  void * jresult ;
  quickmsg::ServiceCallTimeout *result = 0 ;
  
  result = (quickmsg::ServiceCallTimeout *)new quickmsg::ServiceCallTimeout();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceCallTimeout__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::ServiceCallTimeout *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (quickmsg::ServiceCallTimeout *)new quickmsg::ServiceCallTimeout((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ServiceCallTimeout(void * jarg1) {
  quickmsg::ServiceCallTimeout *arg1 = (quickmsg::ServiceCallTimeout *) 0 ;
  
  arg1 = (quickmsg::ServiceCallTimeout *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ServiceCallTimeout_what(void * jarg1) {
  char * jresult ;
  quickmsg::ServiceCallTimeout *arg1 = (quickmsg::ServiceCallTimeout *) 0 ;
  char *result = 0 ;
  
  arg1 = (quickmsg::ServiceCallTimeout *)jarg1; 
  result = (char *)((quickmsg::ServiceCallTimeout const *)arg1)->what();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Client(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  quickmsg::Client *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (quickmsg::Client *)new quickmsg::Client((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Client(void * jarg1) {
  quickmsg::Client *arg1 = (quickmsg::Client *) 0 ;
  
  arg1 = (quickmsg::Client *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_call__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  quickmsg::Client *arg1 = (quickmsg::Client *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  SwigValueWrapper< std::shared_ptr< quickmsg::ServiceReply > > result;
  
  arg1 = (quickmsg::Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  try {
    result = (arg1)->call((std::string const &)*arg2,arg3);
  }
  catch(quickmsg::ServiceCallTimeout &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ quickmsg::ServiceCallTimeout exception thrown");
    return 0; 
  }
  
  jresult = new quickmsg::ServiceReplyPtr((const quickmsg::ServiceReplyPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_call__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  quickmsg::Client *arg1 = (quickmsg::Client *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< quickmsg::ServiceReply > > result;
  
  arg1 = (quickmsg::Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->call((std::string const &)*arg2);
  }
  catch(quickmsg::ServiceCallTimeout &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ quickmsg::ServiceCallTimeout exception thrown");
    return 0; 
  }
  
  jresult = new quickmsg::ServiceReplyPtr((const quickmsg::ServiceReplyPtr &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Client_calls__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  quickmsg::Client *arg1 = (quickmsg::Client *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string result;
  
  arg1 = (quickmsg::Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  try {
    result = (arg1)->calls((std::string const &)*arg2,arg3);
  }
  catch(quickmsg::ServiceCallTimeout &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ quickmsg::ServiceCallTimeout exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Client_calls__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  quickmsg::Client *arg1 = (quickmsg::Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (quickmsg::Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->calls((std::string const &)*arg2);
  }
  catch(quickmsg::ServiceCallTimeout &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ quickmsg::ServiceCallTimeout exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT quickmsg::Message * SWIGSTDCALL CSharp_ServiceReply_SWIGUpcast(quickmsg::ServiceReply *jarg1) {
    return (quickmsg::Message *)jarg1;
}

#ifdef __cplusplus
}
#endif

