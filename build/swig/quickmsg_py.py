# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_quickmsg_py', [dirname(__file__)])
        except ImportError:
            import _quickmsg_py
            return _quickmsg_py
        if fp is not None:
            try:
                _mod = imp.load_module('_quickmsg_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _quickmsg_py = swig_import_helper()
    del swig_import_helper
else:
    import _quickmsg_py
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_quickmsg_py.SHARED_PTR_DISOWN_swigconstant(_quickmsg_py)
SHARED_PTR_DISOWN = _quickmsg_py.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickmsg_py.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _quickmsg_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _quickmsg_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _quickmsg_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _quickmsg_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _quickmsg_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _quickmsg_py.SwigPyIterator_copy(self)

    def next(self):
        return _quickmsg_py.SwigPyIterator_next(self)

    def __next__(self):
        return _quickmsg_py.SwigPyIterator___next__(self)

    def previous(self):
        return _quickmsg_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _quickmsg_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _quickmsg_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _quickmsg_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _quickmsg_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _quickmsg_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _quickmsg_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _quickmsg_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _quickmsg_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def init(name):
    return _quickmsg_py.init(name)
init = _quickmsg_py.init

def shutdown(*args):
    return _quickmsg_py.shutdown(*args)
shutdown = _quickmsg_py.shutdown

def ok():
    return _quickmsg_py.ok()
ok = _quickmsg_py.ok
class Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["header"] = _quickmsg_py.Message_header_set
    __swig_getmethods__["header"] = _quickmsg_py.Message_header_get
    if _newclass:
        header = _swig_property(_quickmsg_py.Message_header_get, _quickmsg_py.Message_header_set)
    __swig_setmethods__["msg"] = _quickmsg_py.Message_msg_set
    __swig_getmethods__["msg"] = _quickmsg_py.Message_msg_get
    if _newclass:
        msg = _swig_property(_quickmsg_py.Message_msg_get, _quickmsg_py.Message_msg_set)

    def __init__(self, *args):
        this = _quickmsg_py.new_Message(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _quickmsg_py.delete_Message
    __del__ = lambda self: None

    def get_stamp(self):
        return _quickmsg_py.Message_get_stamp(self)

    def get_context(self):
        return _quickmsg_py.Message_get_context(self)

    def get_src(self):
        return _quickmsg_py.Message_get_src(self)

    def get_msg(self):
        return _quickmsg_py.Message_get_msg(self)

    def set_stamp_now(self):
        return _quickmsg_py.Message_set_stamp_now(self)

    def set_context(self, ctx):
        return _quickmsg_py.Message_set_context(self, ctx)

    def set_msg(self, msg_str):
        return _quickmsg_py.Message_set_msg(self, msg_str)
Message_swigregister = _quickmsg_py.Message_swigregister
Message_swigregister(Message)

class ServiceReply(Message):
    __swig_setmethods__ = {}
    for _s in [Message]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceReply, name, value)
    __swig_getmethods__ = {}
    for _s in [Message]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceReply, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quickmsg_py.new_ServiceReply(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _quickmsg_py.delete_ServiceReply
    __del__ = lambda self: None
    __swig_setmethods__["successful"] = _quickmsg_py.ServiceReply_successful_set
    __swig_getmethods__["successful"] = _quickmsg_py.ServiceReply_successful_get
    if _newclass:
        successful = _swig_property(_quickmsg_py.ServiceReply_successful_get, _quickmsg_py.ServiceReply_successful_set)
ServiceReply_swigregister = _quickmsg_py.ServiceReply_swigregister
ServiceReply_swigregister(ServiceReply)

class Publisher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Publisher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Publisher, name)
    __repr__ = _swig_repr

    def __init__(self, topic, wait=False):
        this = _quickmsg_py.new_Publisher(topic, wait)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _quickmsg_py.delete_Publisher
    __del__ = lambda self: None

    def publish(self, msg):
        return _quickmsg_py.Publisher_publish(self, msg)

    def join(self):
        return _quickmsg_py.Publisher_join(self)
Publisher_swigregister = _quickmsg_py.Publisher_swigregister
Publisher_swigregister(Publisher)


def default_cb(msg, arg2):
    return _quickmsg_py.default_cb(msg, arg2)
default_cb = _quickmsg_py.default_cb
class Subscriber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Subscriber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Subscriber, name)
    __repr__ = _swig_repr

    def __init__(self, topic, queue_size=10):
        this = _quickmsg_py.new_Subscriber(topic, queue_size)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _quickmsg_py.delete_Subscriber
    __del__ = lambda self: None

    def messages(self):
        return _quickmsg_py.Subscriber_messages(self)

    def join(self):
        return _quickmsg_py.Subscriber_join(self)
Subscriber_swigregister = _quickmsg_py.Subscriber_swigregister
Subscriber_swigregister(Subscriber)

class AsyncSubscriber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsyncSubscriber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsyncSubscriber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == AsyncSubscriber:
            _self = None
        else:
            _self = self
        this = _quickmsg_py.new_AsyncSubscriber(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _quickmsg_py.delete_AsyncSubscriber
    __del__ = lambda self: None

    def spin(self):
        return _quickmsg_py.AsyncSubscriber_spin(self)

    def async_spin(self):
        return _quickmsg_py.AsyncSubscriber_async_spin(self)

    def handle_message(self, msg):
        return _quickmsg_py.AsyncSubscriber_handle_message(self, msg)
    def __disown__(self):
        self.this.disown()
        _quickmsg_py.disown_AsyncSubscriber(self)
        return weakref_proxy(self)
AsyncSubscriber_swigregister = _quickmsg_py.AsyncSubscriber_swigregister
AsyncSubscriber_swigregister(AsyncSubscriber)

class Service(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Service, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Service, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Service:
            _self = None
        else:
            _self = self
        this = _quickmsg_py.new_Service(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _quickmsg_py.delete_Service
    __del__ = lambda self: None

    def service_impl(self, req):
        return _quickmsg_py.Service_service_impl(self, req)

    def spin(self):
        return _quickmsg_py.Service_spin(self)

    def async_spin(self):
        return _quickmsg_py.Service_async_spin(self)
    def __disown__(self):
        self.this.disown()
        _quickmsg_py.disown_Service(self)
        return weakref_proxy(self)
Service_swigregister = _quickmsg_py.Service_swigregister
Service_swigregister(Service)

class ServiceCallTimeout(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServiceCallTimeout, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ServiceCallTimeout, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _quickmsg_py.new_ServiceCallTimeout(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _quickmsg_py.delete_ServiceCallTimeout
    __del__ = lambda self: None

    def what(self):
        return _quickmsg_py.ServiceCallTimeout_what(self)
ServiceCallTimeout_swigregister = _quickmsg_py.ServiceCallTimeout_swigregister
ServiceCallTimeout_swigregister(ServiceCallTimeout)

class Client(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Client, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Client, name)
    __repr__ = _swig_repr

    def __init__(self, srv_name):
        this = _quickmsg_py.new_Client(srv_name)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _quickmsg_py.delete_Client
    __del__ = lambda self: None

    def call(self, msg, timeout_s=10):
        return _quickmsg_py.Client_call(self, msg, timeout_s)

    def calls(self, req, timeout_s=10):
        return _quickmsg_py.Client_calls(self, req, timeout_s)
Client_swigregister = _quickmsg_py.Client_swigregister
Client_swigregister(Client)

# This file is compatible with both classic and new-style classes.


